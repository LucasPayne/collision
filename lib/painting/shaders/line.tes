#version 420
#block Standard3D
#block StandardLoopWindow

layout (quads, equal_spacing, ccw) in;

uniform float line_width;
// uniform float antialiasing_radius;


out vec2 uv;
flat out float u_bounds;
out vec2 fragment_position;
flat out vec2 f_A;
flat out vec2 f_B;

in controlled_vertex {
    vec3 ndc_position;
} vertex_outputs[];

void main(void)
{
    float antialiasing_radius = line_width * 0.3;

    vec2 A = vertex_outputs[0].ndc_position.xy;
    vec2 B = vertex_outputs[1].ndc_position.xy;
    f_A = A;
    f_B = B;

    vec2 mid_point = (A + B) / 2;
    vec2 X_axis = B - A;
    float line_length = length(X_axis);
    float inv_line_length = 1.0 / line_length; //---- need to handle degenerate line segments.
    X_axis *= inv_line_length;
    vec2 Y_axis = vec2(-X_axis.y, X_axis.x);

    float u = 2*gl_TessCoord[0] - 1;
    float v = 2*gl_TessCoord[1] - 1;
    uv = vec2(u * (line_length + line_width + 2*antialiasing_radius) / (line_length + line_width), v * (line_width + 2*antialiasing_radius) / line_width);
    u_bounds = line_length / (line_length + line_width); // Give the fragment shader the bounds for doing sdf tests. u < -u_bounds or u > ubounds means the sdf is to the end caps.
    
    float lw = line_width;
    float half_extended_line_length = 0.5 * (line_length + lw) + antialiasing_radius;
    float half_extended_line_height = 0.5 * lw + antialiasing_radius;
    vec2 pos = mid_point + u*X_axis*half_extended_line_length + v*Y_axis*half_extended_line_height;
    gl_Position = vec4(pos, mix(vertex_outputs[0].ndc_position.z, vertex_outputs[1].ndc_position.z, gl_TessCoord[0]), 1); //--- need to interpolate depths so weird clipping doesn't happen.
    // gl_Position = vec4(pos, 0.5, 1); //--- need to interpolate depths so weird clipping doesn't happen.
    fragment_position = pos;
}
