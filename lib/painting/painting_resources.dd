
Materials < (
    line < MaterialType (
        vertex_format: 3;
        vertex_shader: Painting/shaders/line.vert;
        tessellation_control_shader: Painting/shaders/line.tcs;
        tessellation_evaluation_shader: Painting/shaders/line.tes;
        fragment_shader: Painting/shaders/line.frag;
        num_blocks: 2;
        string block0: Standard3D;
        string block1: StandardLoopWindow;
        patch_vertices: 2;
    );
    flat_color < MaterialType (
        vertex_format: 3;
        vertex_shader: Painting/shaders/passthrough.vert;
        fragment_shader: Painting/shaders/flat_color.frag;
        num_blocks: 1;
        string block0: Standard3D;
    );
    circle < MaterialType (
        vertex_format: 3;
        vertex_shader: Painting/shaders/passthrough.vert;
        fragment_shader: Painting/shaders/circle.frag;
        num_blocks: 1;
        string block0: Standard3D;
    );
    sphere < MaterialType (
        vertex_format: 3;
        vertex_shader: Painting/shaders/sphere.vert;
        tessellation_control_shader: Painting/shaders/sphere.tcs;
        tessellation_evaluation_shader: Painting/shaders/sphere.tes;
        fragment_shader: Painting/shaders/flat_color.frag;
        num_blocks: 1;
        string block0: Standard3D;
        patch_vertices: 1;
    );
    sprite < MaterialType (
        vertex_format: 3U;
        vertex_shader: Painting/shaders/sprite.vert;
        fragment_shader: Painting/shaders/sprite.frag;
        num_blocks: 1;
        // Currently 2D stuff is just drawn with a special mvp matrix, so this does use Standard3D.
        string block0: Standard3D;
        num_textures: 1;
        string texture0: sprite;
    );
);



