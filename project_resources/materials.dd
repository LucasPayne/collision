
3DMT < MaterialType (
    num_blocks: 1;
    string block0: Standard3D;
);

red < 3DMT (
    vertex_format: 3;
    vertex_shader: Shaders/passthrough.vert;
    fragment_shader: Shaders/red.frag;
);

// Changes over time, to test the uniform uploading.
timetest < MaterialType (
    vertex_format: 3;
    vertex_shader: Shaders/passthrough_none.vert;
    fragment_shader: Shaders/timetest.frag;
    num_blocks: 1;
    string block0: StandardLoopWindow;
);

flat_color < MaterialType (
    vertex_format: 3;
    vertex_shader: Shaders/passthrough.vert;
    fragment_shader: Shaders/flat_color.frag;
    num_blocks: 2;
    string block0: Standard3D;
    string block1: MaterialProperties;
);

tinted_texture < MaterialType (
    vertex_format: 3U;
    vertex_shader: Shaders/tinted_texture.vert;
    fragment_shader: Shaders/tinted_texture.frag;
    num_blocks: 2;
    string block0: MaterialProperties;
    string block1: Standard3D;
    num_textures: 1;
    string texture0: diffuse_map;
    properties < (
        vec4 flat_color: 1,0,1,1;
    );
);

// Straightforward texturing with no extras.
texture < MaterialType (
    vertex_format: 3U;
    vertex_shader: Shaders/texture.vert;
    fragment_shader: Shaders/texture.frag;
    num_blocks: 1;
    string block0: Standard3D;
    num_textures: 1;
    string texture0: diffuse_map;
);
cutout_texture < texture (
    fragment_shader: Shaders/cutout_texture.frag;
);

textured_phong < MaterialType (
    vertex_format: 3NU;
    vertex_shader: Shaders/textured_phong.vert;
    fragment_shader: Shaders/textured_phong.frag;
    num_blocks: 3;
    string block0: Standard3D;
    string block1: MaterialProperties;
    string block2: Lights;
    num_textures: 1;
    string texture0: diffuse_map;
);

// Make shadow passes on a depth texture.
shadows < MaterialType (
    vertex_format: 3;
    vertex_shader: Shaders/shadows.vert;
    fragment_shader: Shaders/shadows.frag;
    num_blocks: 1;
    string block0: Standard3D;
);

textured_phong_shadows < MaterialType (
    vertex_format: 3NU;
    vertex_shader: Shaders/textured_phong_shadows.vert;
    fragment_shader: Shaders/textured_phong_shadows.frag;
    num_blocks: 3;
    string block0: Standard3D;
    string block1: MaterialProperties;
    string block2: Lights;
    num_textures: 1;
    string texture0: diffuse_map;
);
textured_phong_shadows_normal_mapped < MaterialType (
    vertex_format: 3NUT;
    vertex_shader: Shaders/textured_phong_shadows_normal_mapped.vert;
    fragment_shader: Shaders/textured_phong_shadows_normal_mapped.frag;
    num_blocks: 4;
    string block0: Standard3D;
    string block1: MaterialProperties;
    string block2: Lights;
    string block3: StandardLoopWindow;
    num_textures: 2;
    string texture0: diffuse_map;
    string texture1: normal_map;
);


render_shadow_map < MaterialType (
    vertex_format: 3U;
    vertex_shader: Shaders/passthrough_U.vert;
    fragment_shader: Shaders/render_shadow_map.frag;
    num_blocks: 1;
    string block0: Standard3D;
    num_textures: 1;
    string texture0: shadow_map;
);
render_projection_shadow_map < MaterialType (
    vertex_format: 3U;
    vertex_shader: Shaders/passthrough_U.vert;
    // fragment shader taken from https://learnopengl.com/Advanced-Lighting/Shadows/Shadow-Mapping
    fragment_shader: Shaders/render_projection_shadow_map.frag;
    num_blocks: 1;
    string block0: Standard3D;
    num_textures: 1;
    string texture0: shadow_map;
);

// Testing materials
test_texture < MaterialType (
    vertex_format: 3U;
    vertex_shader: Shaders/passthrough_U.vert;
    fragment_shader: Shaders/test_texture.frag;
    num_blocks: 1;
    string block0: Standard3D;
);

// Create the normals for testing phong lighting approximately when a model does not have normals.
flat_color_phong_outward_normals < MaterialType (
    vertex_format: 3;
    vertex_shader: Shaders/passthrough_3N_outward_normals.vert;
    fragment_shader: Shaders/flat_color_phong.frag;
    num_blocks: 4;
    string block0: Standard3D;
    string block1: MaterialProperties;
    string block2: Lights;
    string block3: StandardLoopWindow;
    properties < (
        vec4 flat_color;
    );
);

sdf_text < MaterialType (
    vertex_format: 3U;
    vertex_shader: Shaders/text/sdf_text.vert;
    fragment_shader: Shaders/text/sdf_text.frag;
    num_blocks: 1;
    string block0: Standard3D;
    num_textures: 1;
    string texture0: sdf_texture;
);

texture_normal < MaterialType (
    vertex_format: 3NU;
    vertex_shader: Shaders/texture_normal.vert;
    fragment_shader: Shaders/texture_normal.frag;
    num_blocks: 1;
    string block0: Standard3D;
    num_textures: 1;
    string texture0: diffuse_map;
);

//--------------------------------------------------------------------------------
// Testing materials and shaders.
//--------------------------------------------------------------------------------

test_tesselation < MaterialType (
    vertex_format: 3;
    vertex_shader: Shaders/passthrough_none.vert;
    fragment_shader: Shaders/red.frag;
    tesselation_control_shader: Shaders/testing/tesselation.tcs;
    tesselation_evaluation_shader: Shaders/testing/tesselation.tes;
    num_blocks: 1;
    string block0: Standard3D;
);

textured_phong_shadows_phong_tesselated < textured_phong_shadows (
    tesselation_control_shader: Shaders/phong_tesselation.tcs;
    tesselation_evaluation_shader: Shaders/phong_tesselation.tes;
);

red_phong_tessellation < MaterialType (
    vertex_format: 3N;
    vertex_shader: Shaders/red_phong_tessellation.vert;
    tesselation_control_shader: Shaders/red_phong_tessellation.tcs;
    tesselation_evaluation_shader: Shaders/red_phong_tessellation.tes;
    fragment_shader: Shaders/red.frag;
    num_blocks: 2;
    string block0: Standard3D;
    string block1: StandardLoopWindow;
    force_patches: true;
    patch_vertices: 3;
);
