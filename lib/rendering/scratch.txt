

On load, a material queries its program for a MaterialProperties block.


typedef struct Material_s {
    ResourceHandle program; /* Resource: GraphicsProgram */

    void *properties; /* MaterialProperties uniform block */
} Material;


Material file:

// Program
graphics_program: Shaders/texturing
// Parameterization (initial values. These are still controllable at run-time, but only need to be reuploaded when changed.)
mp_base_color: 0,0,0,1
mp_specular_power: 10
mp_specular_multiplier: 7
mp_specular_color: 0.3 0.12 0.084 1.0
mp_bump_mapping: true
tx_diffuse_map: Textures/blocks/dirt
tx_bump_map: Textures/blocks/dirt_bump


layout(std140) uniform MaterialProperties {
    vec4 base_color;
    float specular_power;
    float specular_multiplier;
    vec4 specular_color;
    bool bump_mapping;
};
uniform sampler2D diffuse_map;
uniform sampler2D bump_map;

// Auto-generate?
typedef struct MaterialProperties_texturing_s {
    vec4 base_color;
    uint8_t ___pad1[2];
    float specular_power;
    uint8_t ___pad2[2];
    float specular_multiplier;
    bool bump_mapping;
    vec4 specular_color;
} MaterialProperties_texturing;
//////////////////// May be pointless. To prevent reupload of uniforms,
"bit"flags could be used. Then, the uniform update interface is through function calls. Maybe a
generated enum, or hand-synchronized, if needed.

enum MP_texturing {
    MP_texturing_base_color,
    MP_texturing_specular_power,
    MP_texturing_specular_multiplier,
    MP_texturing_specular_color,
    MP_texturing_bump_mapping,
    NUM_MP_texturing,
};
bool BITFLAGS_MP_texturing[NUM_MP_texturing];

Material_properties_update_vec4(MP_texturing_base_color, vec4(1,0,1,1));

----------------------
----------------------
Probably need better dictionary, text file stuff
----------------------



Could make the dictionary a basic part of the serialization stuff. So, it is fine if
almost everything depends on it. Then, each module provides, if helpful, a function
to create query rules for its types. So the matrix mathematics module has a function that
works with global state of the dictionary to let it handle different types. Then an application
would have to initialize those, and then other modules will break if certain code isn't run
in the application, which is bad.

Maybe have it per dictionary use.
without module-given functions
dict_query_rule_add(q, "ResourcePath", query_val_ResourcePath);
dict_query_rule_add(q, "VertexFormat", query_val_VertexFormat);
dict_query_rule_add(q, "vec4", query_val_vec4);

With module-given functions

DictQuerier *q = dict_new_querier("/path/to/dictionary/text/file");
dict_query_rules_matrix_mathematics(q);
dict_query_rules_rendering(q);
dict_query_rules_resources(q);

VertexFormat vf;
if (!dict_query_get(q, "VertexFormat", "vertex_format", &vf, sizeof(vf))) {
    // handle failure to extract an entry named "vertex_format" of a valid format
}
vec4 specular_color;
if (!dict_query_get(q, "vec4", "mp_specular_color", &specular_color, sizeof(vec4))) {
    // handle this
}

dict_destroy_querier(q);


// behind the module-given functions, the querier is provided with maps of type names to query validation/value-getting functions
bool query_val_VertexFormat(char *string, void *val)
{
    VertexFormat vf = string_to_VertexFormat(string);
    if (vf == VERTEX_FORMAT_NONE) return false;
    memcpy(val, vf, sizeof(vf));
    return true;
}
bool query_val_vec4(char *string, void *val)
{
    vec4 v;
    for (int i = 0; i < 4; i++) {
        if (sscanf(string, "%f", &v.vals[i]) == EOF) return false;
    }
    memcpy(val, &v, sizeof(vec4));
    return true;
}
These are fixed-width types. How would strings be handled? What about reading in data structures, lists? "Constructors" can be
in a query val function but it is above restricted to a certain structure with a fixed size. Probably work on the string-getting stuff first.
Strings are trivial to get without this query val stuff. So, maybe get them with a regular dict_get function and validate them yourself.

//================================================================================


void *GraphicsProgram_load(char *resource_path)
{
    char path[1024];
    if (!resource_file_path(resource_path, ".GraphicsProgram", path, 1024)) return NULL;
    
    DictQuerier *q = dict_new_querier(path);
    dict_query_rules_rendering(q);

    VertexFormat vertex_format;
    if (!dict_query_get(q, "VertexFormat", "vertex_format", &vertex_format, sizeof(vertex_format))) return NULL;
    const int buf_size = 1024;
    char vertex_shader_resource_path[buf_size];
    char fragment_shader_resource_path[buf_size];
    if (!dict_query_get_string(q, "vertex_shader", vertex_shader_resource_path, buf_size)) return NULL;
    if (!dict_query_get_string(q, "fragment_shader", fragment_shader_resource_path, buf_size)) return NULL;

    // ... do stuff with these values

    dict_destroy_querier(q);


}



void *GraphicsProgram_load(char *path)
{
#define load_error(STRING)\
    { fprintf(stderr, ( STRING )); fputc('\n', stderr); return NULL; }
    //----------------Fatal error messages are here for now for testing.
    // Path format:
    //      Drive/path/to/graphicsprogram
    // Associated build files:
    //      .../path/to/graphicsprogram.GraphicsProgram
    // This is a standard key-value pairs file with graphics program information.
    FILE *file = resource_file_open(path, ".GraphicsProgram", "r");
    if (file == NULL) load_error("Could not open graphics program file.");
    Dictionary *dict = dictionary_read(file);
    if (dict == NULL) load_error("Could not read dictionary for graphics program.");
    
    // Read in entries from the dictionary.
    const int buf_size = 512;
    char buf[buf_size];

    VertexFormat vertex_format;
    char vertex_shader_path[buf_size];
    char fragment_shader_path[buf_size];
    #define dict_try(STRING)\
        { if (!dict_get(dict, ( STRING ), buf, buf_size)) {\
                fprintf(stderr, "Could not find " #STRING ".\n");\
                return NULL;\
        } }
    dict_try("vertex_format");
    vertex_format = string_to_VertexFormat(buf);
    if (vertex_format == VERTEX_FORMAT_NONE) load_error("Invalid vertex format");
    dict_try("vertex_shader");
    strncpy(vertex_shader_path, buf, buf_size);
    dict_try("fragment_shader");
    strncpy(fragment_shader_path, buf, buf_size);
#if 0
    dict_try("type");
    GraphicsProgramType graphics_program_type;
    if (strcmp(buf, "StandardView") == 0) {
        graphics_program_type = GRAPHICS_PROGRAM_STANDARD_VIEW;
    } else if (strcmp(buf, "Standard2D") == 0) {
        graphics_program_type = GRAPHICS_PROGRAM_STANDARD_2D;
    } else {
        load_error("Invalid graphics program type.");
    }
#endif

#if 0
    char uniform_string[buf_size];
    if (!dict_get(dict, "uniforms", buf, buf_size)) {
        fprintf(stderr, "COULD NOT FIND uniforms\n");
        return NULL;
    }
    strncpy(uniform_string, buf, buf_size);
#endif

    GraphicsProgram *program = (GraphicsProgram *) calloc(1, sizeof(GraphicsProgram));
    mem_check(program);
    program->program_id = glCreateProgram();
    if (program->program_id == 0) load_error("Could not create program ID.");
    program->program_type = GRAPHICS_PROGRAM_VF; // Only using vertex and fragment shaders.
    program->vertex_format = vertex_format;
    /* program->program_type = graphics_program_type; //reused program_type... was for which shader stages are a part of it. */

    //////////////////////////////////////////////////////////////////////////////////
    // If create new resource handles !!! REMEMBER TO FREE if resource load fails.
    program->shaders[Vertex] = new_resource_handle(Shader, vertex_shader_path);
    program->shaders[Fragment] = new_resource_handle(Shader, fragment_shader_path);

    // Resources for shaders have been associated. Now, attach them and link them to this GraphicsProgram object.
    // The shader resource dereferences will trigger shader loads and compilation.
    glAttachShader(program->program_id, resource_data(Shader, program->shaders[Vertex])->shader_id);
    glAttachShader(program->program_id, resource_data(Shader, program->shaders[Fragment])->shader_id);
    // link_shader_program links and does link-error checking.
    link_shader_program(program->program_id);
    // Detach the shaders so they can be deleted if needed (but for now, as resources, they are still loaded resources available
    // for linking into other graphics programs).
    glDetachShader(program->program_id, resource_data(Shader, program->shaders[Vertex])->shader_id);
    glDetachShader(program->program_id, resource_data(Shader, program->shaders[Fragment])->shader_id);

#if 0
    GLuint uniform_block_index;
    if (program->program_type == GRAPHICS_PROGRAM_STANDARD_VIEW) {
        uniform_block_index = glGetUniformBlockIndex(program->program_id, "StandardView");
        if (uniform_block_index == GL_INVALID_INDEX) load_error("Could not find standard uniform block \"StandardView\".");
        // The standard uniform block (time, mvp matrix, aspect ratio, dimensions, stuff like that) is now bound to this program.
        glUniformBlockBinding(program->program_id, uniform_block_index, UNIFORM_BLOCK_STANDARD);
    } else if (program->program_type == GRAPHICS_PROGRAM_STANDARD_2D) {
        GLuint uniform_block_index = glGetUniformBlockIndex(program->program_id, "Standard2D");
        if (uniform_block_index == GL_INVALID_INDEX) load_error("Could not find standard uniform block \"Standard2D\".");
        // The standard uniform block (time, mvp matrix, aspect ratio, dimensions, stuff like that) is now bound to this program.
    } else {
        load_error("Invalid graphics program type got through.");
    }
    glUniformBlockBinding(program->program_id, uniform_block_index, UNIFORM_BLOCK_STANDARD);
#endif
    // Now that the program has been compiled, gather the uniform locations.
    // Example in .GraphicsProgram file:
    // uniforms: mat4x4 mvp_matrix, float aspect_ratio, float frand, vec3 model_pos
#if 0
    /* A way to query the standard dictionary file for information, store
     * as certain types, give error/malformation information, and facilities
     * for storing things further than key-value-pairs, or list-type values,
     * tabbed lists, ... , is really needed instead of hardcoding string processing
     * and retrieval from the dictionary in each thing that uses one.
     */
    char *entry = uniform_string;
    while (*entry != '\0') {
        char *end = strchr(entry, ',');
        if (end == NULL) end = strchr(entry, '\0');
        while (isspace(*entry)) entry++;
        
        char *sep = strchr(entry, ' ');
        if (sep == NULL || sep >= end) load_error("Bad list of uniforms given.");
        char buf[512];
        strncpy(buf, entry, sep - entry);
        buf[sep - entry] = '\0';
            /* printf("Got type \"%s\"\n", buf); */
            /* getchar(); */
        UniformType uniform_type = string_to_UniformType(buf);
        if (uniform_type == UNIFORM_NONE) load_error("Invalid uniform type given.");
        strncpy(buf, sep + 1, end - (sep + 1));
        buf[end - (sep + 1)] = '\0';
            /* printf("Got name \"%s\"\n", buf); */
            /* getchar(); */

        // Add this uniform to the graphics program.
        GraphicsProgram_add_uniform(program, uniform_type, buf);

        if (*end == '\0') break;
        entry = end + 1;
    }
#endif

    destroy_dictionary(dict);
    /* printf("!!! program type: %u\n", program->program_type); */
    /* getchar(); */
    return (void *) program;
#undef load_error
#undef dict_try
}
