
//--------------------------------------------------------------------------------
// Basic data-definition types/schematics.
//--------------------------------------------------------------------------------
// "Resource" schematics, asset manifests.
Geometry < (
    string vertex_format; // 3U, 3NCU, etc.
    string type;          // Types: ply
    string path;          // Principle path of the asset.
    bool calculate_normals: false; // With this option, normals are calculated for each vertex as unit length averages of the normals of adjacent triangles.
    string calculate_uv: none; // This is a string so there can be multiple options for projections used to generate UV coordinates.
    vec3 calculate_uv_orthographic_direction: 0,0,1; // Projection-type parameters.
    float calculate_uv_scale: 1.0; // scale the calculated UV coordinates. (might only make sense for certain projections).
    int patch_vertices: 0;
);
MaterialType < (
    string vertex_format;
    string vertex_shader;
    string fragment_shader;
    string tessellation_control_shader;
    string tessellation_evaluation_shader;
    uint num_blocks: 0;
    uint num_textures: 0;
    bool has_properties: false;
    bool force_patches: false;
    int patch_vertices: 0;

    properties < ();
    // A Material instance has its own properties.
    // It is intended for this to be done in a Material instance, for its material type:
    // properties < {material_type}/properties (
    //      ...
    // );
    // This lets a material instance define properties for this material type, and can use its defaults.
);
// Material instances.
Material < (
    string type: MaterialType;
    // Queried for Texture.
);

Texture < (
    string type; // Types: png
    string path; // Principle path of the asset.
    // Could have generic build-directives here, like image resizing and grayscale.
    bool cutout: false; // If cutout is set, options are set in the texture to make it work more nicely for cutout textured quads.
    bool nearest: false; // If nearest is set, then texture values are clamped to the nearest texel instead of linearly interpolated.
);

Font < (
    string sdf_glyph_map; // png image file with the signed distance fields of glyphs.
    string sdf_metadata; // text file of glyph metadata.
);

// "GameObject" schematics, entity and aspect system data-definitions.
GameObject < (
    bool active: true;
);
Aspect < (
    bool enabled: true;
);
Transform < Aspect (
    vec3 position: 0,0,0;
    vec3 rotation: 0,0,0;
);
Body < Aspect (
    float scale;
    string geometry;
    string material;
    bool is_ground: false;
);

//--------------------------------------------------------------------------------

ApplicationConfiguration < (
    ivec2 gl_version;
    bool core_profile;
    vec4 fg_color: 1,1,1,1;
    vec4 bg_color: 0,0,0,1;
    float aspect_ratio: 1;
    string cull_mode: front;
    bool depth_test: true;
    bool raw_mouse: false;
);
app_config < ApplicationConfiguration (
    #include(conf);
);

// Application resources.
Resources < (
    #include(resources);
);
// Could source project-wide resources here as another operand (so the collections, Textures etc., are collected) if that is convenient.

Scenes < (
    //---need directory-independent paths
    #include(/home/lucas/collision/project_resources/scenes);
    #include(scenes);
);
// Source the application data.dd file. This is everything else the application writer wants to store.
Data < (
    #include(data);
);
