
//--------------------------------------------------------------------------------
// Basic data-definition types/schematics.
//--------------------------------------------------------------------------------
// "Resource" schematics, asset manifests.
Geometry < (
    string vertex_format; // 3U, 3NCU, etc.
    string type;          // Types: ply
    string path;          // Principle path of the asset.
);
MaterialType < (
    string vertex_format;
    string vertex_shader;
    string fragment_shader;
    uint num_blocks: 0;
    blocks < (); // Queried for string block{n}.
    uint num_textures: 0;
    textures < (); // Queried for string texture{n}.
    bool has_properties: false;
    properties < ();
    // A Material instance has its own properties.
    // It is intended for this to be done in a Material instance, for its material type:
    // properties < {material_type}/properties (
    //      ...
    // );
    // This lets a material instance define properties for this material type, and can use its defaults.
);
// Material instances.
Material < (
    string type: MaterialType;
    // Queried for Texture.
);

Texture < (
    string type; // Types: png
    string path; // Principle path of the asset.
    // Could have generic build-directives here, like image resizing and grayscale.
);

// "GameObject" schematics, entity and aspect system data-definitions.
GameObject < (
    bool active: true;
);
Aspect < (
    bool enabled: true;
);
Transform < Aspect (
    vec3 position: 0,0,0;
    vec3 rotation: 0,0,0;
);
Body < Aspect (
    float scale;
    string geometry;
    string material;
);

//--------------------------------------------------------------------------------

ApplicationConfiguration < (
    ivec2 gl_version;
    bool core_profile;
    vec4 fg_color: 1,1,1,1;
    vec4 bg_color: 0,0,0,1;
    float aspect_ratio: 1;
    string cull_mode: front;
    bool depth_test: true;
    bool raw_mouse: false;
);
app_config < ApplicationConfiguration (
    #include(conf);
);

// Application resources.
Resources < (
    #include(resources);
);
// Could source project-wide resources here as another operand (so the collections, Textures etc., are collected) if that is convenient.

// Source the application data.dd file. This is everything else the application writer wants to store.
Data < (
    #include(data);
);
