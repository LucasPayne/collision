#if 0
    for (char c = 'A'; c <= 'z'; c++) {
        FT_UInt glyph_index = FT_Get_Char_Index(face, c);
        if (glyph_index == 0) {
            printf("Could not find glyph \'%c\'\n.", c);
            exit(1);
        }
        // FT_Load_Glyph(face, glyph_index, load_flags);
        if (FT_Load_Glyph(face, glyph_index, FT_LOAD_DEFAULT)) {
            printf("Could not load glyph \'%c\'\n.", c);
            exit(1);
        }
        if (face->glyph->format != FT_GLYPH_FORMAT_BITMAP) {
            // FT_Render_Glyph(glyph, render_mode in {FT_RENDER_MODE_MONO,FT_RENDER_MODE_NORMAL});
            // FT_RENDER_MODE_NORMAL is an 8-bit grayscale anti-aliased (coverage-based) rasterization
            // of the glyph.
            if (FT_Render_Glyph(face->glyph, FT_RENDER_MODE_NORMAL)) {
                printf("Could not render glyph \'%c\'\n.", c);
                exit(1);
            }
        }
        int super_width = face->glyph->bitmap.width;
        int super_height = face->glyph->bitmap.rows;
        uint8_t *super_image = malloc(sizeof(uint8_t) * super_width * super_height);
        for (int i = 0; i < super_height; i++) {
            for (int j = 0; j < super_width; j++) {
                super_image[i * super_width + j] = face->glyph->bitmap.buffer[i * super_width + j] > 0 ? 1 : 0;
            }
        }
        /*--------------------------------------------------------------------------------
            typedef struct  FT_Bitmap_
            {
              unsigned int    rows;
              unsigned int    width;
              int             pitch;
              unsigned char*  buffer;
              unsigned short  num_grays;
              unsigned char   pixel_mode;
              unsigned char   palette_mode;
              void*           palette;

            } FT_Bitmap;
        --------------------------------------------------------------------------------*/
        printf("Computing signed-distance field for glyph \'%c\' ...\n", c);
        printf("--------------------------------------------------------------------------------\n");
        printf("width: %u\nrows: %u\n", bitmap.width, bitmap.rows);
        printf("--------------------------------------------------------------------------------\n");
        glyph_dimensions[2*('z' - 'A' + c) + 0] = (uint16_t) bitmap.width;
        glyph_dimensions[2*('z' - 'A' + c) + 1] = (uint16_t) bitmap.rows;

        const int buf_size = 4096;
        char buf[buf_size];
        snprintf(buf, buf_size, "char_%c.png", c);
        FILE *glyph_png = fopen(buf, "wb");
        if (glyph_png == NULL) {
            printf("Failed to create PNG file for glyph \'%c\'\n.", c);
            exit(1);
        }
        // https://www.lemoda.net/c/write-png/
#define libpng_error(STR) { fprintf(stderr, "libpng error: " STR "\n"); exit(1); }
        png_structp png_ptr = png_create_write_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);
        if (png_ptr == NULL) libpng_error("Failed to create a PNG struct.");
        png_infop info_ptr = png_create_info_struct(png_ptr);
        if (info_ptr == NULL) libpng_error("Failed to create PNG info struct.");
        // <setjmp.h>
        // $man setjmp
        if (setjmp(png_jmpbuf(png_ptr))) libpng_error("setjmp failed.");
        png_set_IHDR(png_ptr, info_ptr, bitmap.width, bitmap.rows, 8, // depth
                     PNG_COLOR_TYPE_GRAY,
                     PNG_INTERLACE_NONE,
                     PNG_COMPRESSION_TYPE_DEFAULT,
                     PNG_FILTER_TYPE_DEFAULT);
        png_byte **row_pointers = png_malloc(png_ptr, bitmap.rows * sizeof(png_byte *));
        if (row_pointers == NULL) libpng_error("Failed to allocate for row_pointers.");
        for (int i = 0; i < bitmap.rows; i++) {
            png_byte *row = png_malloc(png_ptr, sizeof(png_byte) * bitmap.width * 1);
            row_pointers[i] = row;
            if (row == NULL) libpng_error("Failed to allocate for row.");
            for (int j = 0; j < bitmap.width; j++) {
                row[j] = bitmap.buffer[i * bitmap.width + j] > 0 ? (png_byte) 255 : (png_byte) 0; // monochromify the grayscale image given by freetype.
            }
        }
        png_init_io(png_ptr, glyph_png);
        png_set_rows(png_ptr, info_ptr, row_pointers);
        png_write_png(png_ptr, info_ptr, PNG_TRANSFORM_IDENTITY, NULL);
        for (int i = 0; i < bitmap.rows; i++) {
            png_free(png_ptr, row_pointers[i]);
        }
        png_free(png_ptr, row_pointers);
    }
#endif
